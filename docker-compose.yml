#--------------------------------------
# 1. docker-compose -p microservice-comp3095-ecommerce -f docker-compose.yml up -d
#   - this command will start the container in detached mode (-d) without rebuilding the image (if they exist)
# 2. docker-compose -p microservice-comp3095-ecommerce -f docker-compose.yml up -d --build
#   - this command forces the rebuild of images, even if they already exist, before starting them.
#--------------------------------------------

version: '3.9'

services:

  # Product Service
  product-service:
    image: product-service
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    ports:
      - "8082:8082"
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  # Order Service
  order-service:
    image: order-service
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    ports:
      - "8091:8091"
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring

  # Inventory Service
  inventory-service:
    image: inventory-service
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    ports:
      - "8086:8086"
    container_name: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring

  # Api Gateway
  api-gateway:
    image: api-gateway
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    ports:
      - "9000:9000"
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - spring

  notification-service:
    image: notification-service
    build:
      context: ./notification-service
      dockerfile: ./Dockerfile
    ports:
      - "8085:8085"
    container_name: notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092 # Use internal Docker network
      SPRING_MAIL_HOST: sandbox.smtp.mailtrap.io
      SPRING_MAIL_PORT: 2525
      SPRING_MAIL_USERNAME: 58e6b1b712d014
      SPRING_MAIL_PASSWORD: 5407f9b6b6a025
      SPRING_MAIL_PROTOCOL: smtp
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: "true"
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: "true"
      SPRING_MAIL_PROPERTIES_MAIL_DEBUG: "true"
    networks:
      - spring

  # MongoDB for Product Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - spring

  # Mongo Express UI for MongoDB
  mongo-express:
    image: mongo-express
    container_name: mongo-expresss
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb
    networks:
      - spring

  # PostgreSQL for Order Service
  postgres-order:
    image: postgres:latest
    container_name: postgres-order
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order_service
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  # PostgreSQL for Inventory Service
  postgres-inventory:
    image: postgres:latest
    container_name: postgres-inventory
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: inventory_service
    volumes:
      - postgres-inventory-data:/var/lib/postgresql/data
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  # pgAdmin for PostgreSQL Databases
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    depends_on:
      - postgres-order
      - postgres-inventory
    networks:
      - spring

  # Keycloak
  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring
  # postgres for keycloak
  postgres-keycloak:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/keycloak:/var/lib/postgresql/data
    networks:
      - spring

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
    ports:
      - "8087:8080"
    environment:
      KAFKA_CLUSTER_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - broker
    networks:
      - spring

volumes:
  mongo-db:
    driver: local
  postgres-order-data:
    driver: local
  postgres-inventory-data:
    driver: local

networks:
  spring:
    driver: bridge
